// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ExtensionKhrDracoMeshCompressionJsonHandler.h"

#include <CesiumGltf/ExtensionKhrDracoMeshCompression.h>

#include <cassert>
#include <string>

namespace CesiumGltfReader {

ExtensionKhrDracoMeshCompressionJsonHandler::ExtensionKhrDracoMeshCompressionJsonHandler(const CesiumJsonReader::ExtensionReaderContext& context) noexcept : CesiumJsonReader::ExtensibleObjectJsonHandler(context), _bufferView(), _attributes() {}

void ExtensionKhrDracoMeshCompressionJsonHandler::reset(CesiumJsonReader::IJsonHandler* pParentHandler, CesiumGltf::ExtensionKhrDracoMeshCompression* pObject) {
  CesiumJsonReader::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonReader::IJsonHandler* ExtensionKhrDracoMeshCompressionJsonHandler::readObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->readObjectKeyExtensionKhrDracoMeshCompression(CesiumGltf::ExtensionKhrDracoMeshCompression::TypeName, str, *this->_pObject);
}

void ExtensionKhrDracoMeshCompressionJsonHandler::reset(CesiumJsonReader::IJsonHandler* pParentHandler, CesiumUtility::ExtensibleObject& o, const std::string_view& extensionName) {
  std::any& value =
      o.extensions.emplace(extensionName, CesiumGltf::ExtensionKhrDracoMeshCompression())
          .first->second;
  this->reset(
      pParentHandler,
      &std::any_cast<CesiumGltf::ExtensionKhrDracoMeshCompression&>(value));
}

CesiumJsonReader::IJsonHandler* ExtensionKhrDracoMeshCompressionJsonHandler::readObjectKeyExtensionKhrDracoMeshCompression(const std::string& objectType, const std::string_view& str, CesiumGltf::ExtensionKhrDracoMeshCompression& o) {
  using namespace std::string_literals;

  if ("bufferView"s == str) return property("bufferView", this->_bufferView, o.bufferView);
  if ("attributes"s == str) return property("attributes", this->_attributes, o.attributes);

  return this->readObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}

} // namespace CesiumGltfReader
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ExtensionModelExtFeatureMetadataJsonHandler.h"

#include <CesiumGltf/ExtensionModelExtFeatureMetadata.h>

#include <cassert>
#include <string>

namespace CesiumGltfReader {

ExtensionModelExtFeatureMetadataJsonHandler::ExtensionModelExtFeatureMetadataJsonHandler(const CesiumJsonReader::ExtensionReaderContext& context) noexcept : CesiumJsonReader::ExtensibleObjectJsonHandler(context), _schema(context), _schemaUri(), _statistics(context), _featureTables(context), _featureTextures(context) {}

void ExtensionModelExtFeatureMetadataJsonHandler::reset(CesiumJsonReader::IJsonHandler* pParentHandler, CesiumGltf::ExtensionModelExtFeatureMetadata* pObject) {
  CesiumJsonReader::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonReader::IJsonHandler* ExtensionModelExtFeatureMetadataJsonHandler::readObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->readObjectKeyExtensionModelExtFeatureMetadata(CesiumGltf::ExtensionModelExtFeatureMetadata::TypeName, str, *this->_pObject);
}

void ExtensionModelExtFeatureMetadataJsonHandler::reset(CesiumJsonReader::IJsonHandler* pParentHandler, CesiumUtility::ExtensibleObject& o, const std::string_view& extensionName) {
  std::any& value =
      o.extensions.emplace(extensionName, CesiumGltf::ExtensionModelExtFeatureMetadata())
          .first->second;
  this->reset(
      pParentHandler,
      &std::any_cast<CesiumGltf::ExtensionModelExtFeatureMetadata&>(value));
}

CesiumJsonReader::IJsonHandler* ExtensionModelExtFeatureMetadataJsonHandler::readObjectKeyExtensionModelExtFeatureMetadata(const std::string& objectType, const std::string_view& str, CesiumGltf::ExtensionModelExtFeatureMetadata& o) {
  using namespace std::string_literals;

  if ("schema"s == str) return property("schema", this->_schema, o.schema);
  if ("schemaUri"s == str) return property("schemaUri", this->_schemaUri, o.schemaUri);
  if ("statistics"s == str) return property("statistics", this->_statistics, o.statistics);
  if ("featureTables"s == str) return property("featureTables", this->_featureTables, o.featureTables);
  if ("featureTextures"s == str) return property("featureTextures", this->_featureTextures, o.featureTextures);

  return this->readObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}

} // namespace CesiumGltfReader
